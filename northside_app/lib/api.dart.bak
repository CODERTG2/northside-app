import 'package:http/http.dart' as http;
import 'dart:convert';
import 'models/announcement.dart';
import 'models/athlete.dart';
import 'models/athletics_schedule.dart';
import 'models/general_event.dart';
import 'models/home_carousel_item.dart' as carousel;
import 'core/utils/logger.dart';

class ApiService {
  static const String baseUrl = "https://api.tgnest.hackclub.app/api";
  
  // Fetch announcements
  static Future<List<Announcement>> getAnnouncements({String? date}) async {
    try {
      String url = '/announcements';
      if (date != null) {
        url += '?date=$date';
      }
      
      final fullUrl = "$baseUrl$url";
      final response = await http.get(Uri.parse(fullUrl));
      
      if (response.statusCode == 200) {
        final List<dynamic> jsonList = json.decode(response.body);
        return jsonList.map((json) => Announcement.fromJson(json)).toList();
      } else {
        throw Exception('Failed to load announcements: ${response.statusCode}');
      }
    } catch (e) {
      AppLogger.error('Error fetching announcements', e);
      rethrow;
    }
  }

  // Fetch athletes/roster
  static Future<List<Athlete>> getRoster({
    String? sport,
    String? season,
    String? gender,
    String? level,
  }) async {
    try {
      String url = '/roster';
      List<String> params = [];
      
      if (sport != null) params.add('sport=$sport');
      if (season != null) params.add('season=$season');
      if (gender != null) params.add('gender=$gender');
      if (level != null) params.add('level=$level');
      
      if (params.isNotEmpty) {
        url += '?${params.join('&')}';
      }
      
      final fullUrl = "$baseUrl$url";
      AppLogger.info('Making API request to: $fullUrl');
      
      final response = await http.get(Uri.parse(fullUrl));
      AppLogger.info('API Response status: ${response.statusCode}');
      AppLogger.debug('API Response body length: ${response.body.length}');
      
      if (response.statusCode == 200) {
        final List<dynamic> jsonList = json.decode(response.body);
        AppLogger.info('Parsed ${jsonList.length} athletes from API');
        return jsonList.map((json) => Athlete.fromJson(json)).toList();
      } else {
        AppLogger.warning('API Error response body: ${response.body}');
        throw Exception('Failed to load roster: ${response.statusCode}');
      }
    } catch (e) {
      AppLogger.error('Error fetching roster', e);
      rethrow;
    }
  }

  // Fetch athletics schedule
  static Future<List<AthleticsSchedule>> getAthleticsSchedule({
    String? sport,
    String? gender,
    String? level,
    String? date,
    String? time,
    String? name,
    bool? home,
  }) async {
    try {
      String url = '/schedule/athletics';
      List<String> params = [];
      
      if (sport != null) params.add('sport=$sport');
      if (gender != null) params.add('gender=$gender');
      if (level != null) params.add('level=$level');
      if (date != null) params.add('date=$date');
      if (time != null) params.add('time=$time');
      if (name != null) params.add('name=$name');
      if (home != null) params.add('home=$home');
      
      if (params.isNotEmpty) {
        url += '?${params.join('&')}';
      }
      
      final fullUrl = "$baseUrl$url";
      final response = await http.get(Uri.parse(fullUrl));
      
      if (response.statusCode == 200) {
        final List<dynamic> jsonList = json.decode(response.body);
        return jsonList.map((json) => AthleticsSchedule.fromJson(json)).toList();
      } else {
        throw Exception('Failed to load athletics schedule: ${response.statusCode}');
      }
    } catch (e) {
      AppLogger.error('Error fetching athletics schedule', e);
      rethrow;
    }
  }

  // Fetch general events
  static Future<List<GeneralEvent>> getGeneralEvents({
    String? date,
    String? time,
    String? name,
  }) async {
    try {
      String url = '/schedule/general';
      List<String> params = [];
      
      if (date != null) params.add('date=$date');
      if (time != null) params.add('time=$time');
      if (name != null) params.add('name=$name');
      
      if (params.isNotEmpty) {
        url += '?${params.join('&')}';
      }
      
      final fullUrl = "$baseUrl$url";
      final response = await http.get(Uri.parse(fullUrl));
      
      if (response.statusCode == 200) {
        final List<dynamic> jsonList = json.decode(response.body);
        return jsonList.map((json) => GeneralEvent.fromJson(json)).toList();
      } else {
        throw Exception('Failed to load general events: ${response.statusCode}');
      }
    } catch (e) {
      AppLogger.error('Error fetching general events', e);
      rethrow;
    }
  }

  // Fetch home carousel items (10 events/announcements/games)
  static Future<List<carousel.HomeCarouselItem>> getHomeCarousel() async {
    try {
      const url = '/home';
      final fullUrl = "$baseUrl$url";
      AppLogger.info('Making API request to: $fullUrl');
      
      final response = await http.get(Uri.parse(fullUrl));
      AppLogger.info('Home carousel API Response status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final List<dynamic> jsonList = json.decode(response.body);
        AppLogger.info('Parsed ${jsonList.length} home carousel items from API');
        
        // Debug the full response
        AppLogger.debug('Home carousel full API response: ${response.body}');
        
        // Process each item and catch any parsing errors
        final items = <HomeCarouselItem>[];
        for (final json in jsonList) {
          try {
            // Enhanced logging for debugging
            AppLogger.debug('Processing carousel item: $json');
            
            String title = '';
            if (json['title'] != null) {
              title = json['title'].toString();
            } else if (json['sport'] != null) {
              List<String> parts = [];
              if (json['sport'] != null) parts.add(json['sport'].toString());
              if (json['gender'] != null) parts.add(json['gender'].toString()); 
              if (json['level'] != null) parts.add(json['level'].toString());
              if (json['opponent'] != null) parts.add('vs ${json['opponent']}');
              title = parts.join(' ');
            } else if (json['name'] != null) {
              title = json['name'].toString();
            } else {
              title = 'Northside Event';
            }
            
            // Create a clean item
            final item = HomeCarouselItem(
              id: json['_id']?.toString() ?? '',
              title: title,
              description: json['description']?.toString(),
              content: json['content']?.toString(),
              date: json['date']?.toString() ?? json['start_date']?.toString() ?? '',
              time: json['time']?.toString(),
              sport: json['sport']?.toString(),
              gender: json['gender']?.toString(),
              level: json['level']?.toString(),
              name: json['name']?.toString(),
              opponent: json['opponent']?.toString(),
              home: json['home'] as bool?,
              location: json['location']?.toString(),
              type: json['type']?.toString() ?? 'Event',
              createdAt: DateTime.now(),
            );
            items.add(item);
          } catch (e) {
            AppLogger.error('Error processing carousel item', e);
          }
        }
        
        return items;
      } else {
        AppLogger.warning('Home carousel API Error response body: ${response.body}');
        
        // Fallback: If the /home endpoint is not available, combine announcements and athletics
        AppLogger.info('Falling back to combining announcements and athletics for home carousel');
        
        try {
          // Get announcements - directly use bulletin controller to get existing posts
          AppLogger.info('Creating fallback items from existing controllers');
          
          // Create simple carousel items with just basic info
          final items = <Map<String, dynamic>>[];
          
          // Add some sample items since we can't properly access the controllers
          items.add({
            '_id': '1',
            'title': 'Welcome to Northside',
            'description': 'Check out upcoming events and games',
            'date': DateTime.now().toString().substring(0, 10),
            'type': 'Announcement',
          });
          
          items.add({
            '_id': '2',
            'title': 'Football vs West High',
            'sport': 'Football',
            'gender': 'Boys',
            'level': 'Varsity',
            'opponent': 'West High',
            'date': DateTime.now().toString().substring(0, 10),
            'time': '7:00 PM',
            'location': 'Home Field',
            'home': true,
            'type': 'Athletics',
          });
          
          // Process these items with our existing parsing logic
          final processedItems = items.map((json) {
            try {
              // Create a clean item - reuse our custom item creation logic
              String title = '';
              if (json['title'] != null) {
                title = json['title'].toString();
              } else if (json['sport'] != null) {
                List<String> parts = [];
                if (json['sport'] != null) parts.add(json['sport'].toString());
                if (json['gender'] != null) parts.add(json['gender'].toString()); 
                if (json['level'] != null) parts.add(json['level'].toString());
                if (json['opponent'] != null) parts.add('vs ${json['opponent']}');
                title = parts.join(' ');
              } else {
                title = 'Northside Event';
              }
              
              return HomeCarouselItem(
                id: json['_id']?.toString() ?? '',
                title: title,
                description: json['description']?.toString(),
                content: json['content']?.toString(),
                date: json['date']?.toString() ?? json['start_date']?.toString() ?? '',
                time: json['time']?.toString(),
                sport: json['sport']?.toString(),
                gender: json['gender']?.toString(),
                level: json['level']?.toString(),
                name: json['name']?.toString(),
                opponent: json['opponent']?.toString(),
                home: json['home'] as bool?,
                location: json['location']?.toString(),
                type: json['type']?.toString() ?? 'Event',
                createdAt: DateTime.now(),
              );
            } catch (e) {
              AppLogger.error('Error processing carousel fallback item', e);
              // Return a default item in case of error
              return HomeCarouselItem(
                id: '0',
                title: 'Northside Update',
                date: DateTime.now().toString().substring(0, 10),
                type: 'Announcement',
                createdAt: DateTime.now(),
              );
            }
          }).toList();
          
          AppLogger.info('Created ${processedItems.length} fallback carousel items');
          return processedItems;
        } catch (e) {
          AppLogger.error('Error creating fallback carousel items', e);
          return []; // Return empty list if fallback fails
        }
      }
    } catch (e) {
      AppLogger.error('Error fetching home carousel', e);
      
      // Return empty list on error rather than crashing
      return [];
    }
  }
}